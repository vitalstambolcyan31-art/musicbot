import os
import uuid
import yt_dlp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

TOKEN = "8372930034:AAFVPhVEcsWLxNONkcbmpzVYXI2K0Z2Oiu8"

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫—É.\n\n"
        "üéß –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ‚Äî –∏ —è –ø–æ–∫–∞–∂—É —Å–ø–∏—Å–æ–∫."
    )

# --- –ü–æ–∏—Å–∫ –ø–µ—Å–µ–Ω ---
async def search_music(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    await update.message.reply_text(f"üîç –ò—â—É: {query}...")

    try:
        ydl_opts = {
            'format': 'bestaudio/best',
            'noplaylist': True,
            'quiet': True,
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            results = ydl.extract_info(f"ytsearch5:{query}", download=False)['entries']

        buttons = []
        for i, entry in enumerate(results[:5]):
            title = entry['title'][:60]
            video_id = entry['id']
            buttons.append([InlineKeyboardButton(f"üéµ {title}", callback_data=video_id)])

        reply_markup = InlineKeyboardMarkup(buttons)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–µ—Å–Ω—é:", reply_markup=reply_markup)

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:", e)
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ ---
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    video_id = query.data
    await query.edit_message_text("üéß –°–∫–∞—á–∏–≤–∞—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–µ—Å–Ω—é...")

    tmp_name = f"track_{uuid.uuid4().hex}"
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': tmp_name + '.%(ext)s',
        'quiet': True,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(f"https://www.youtube.com/watch?v={video_id}", download=True)
            filename = ydl.prepare_filename(info)
            filename = os.path.splitext(filename)[0] + ".mp3"

            await query.message.reply_audio(
                audio=open(filename, 'rb'),
                title=info.get('title', 'Music'),
                caption="‚úÖ –ì–æ—Ç–æ–≤–æ! üé∂"
            )
            os.remove(filename)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", e)
        await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫.")

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_music))
    app.add_handler(CallbackQueryHandler(button_callback))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–ø–∏—à–∏ –µ–º—É –≤ Telegram.")
    app.run_polling()

if __name__ == "__main__":
    main()
